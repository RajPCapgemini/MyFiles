package com.cg.bankapp.command.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.axonframework.commandhandling.gateway.CommandGateway;
import org.axonframework.messaging.responsetypes.ResponseTypes;
import org.axonframework.queryhandling.QueryGateway;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.cg.bankapp.command.AccountCreateCommand;
import com.cg.bankapp.command.AccountUpdateCommand;
import com.cg.bankapp.command.TransactionEntryFailedCommand;
import com.cg.bankapp.command.entities.Account;
import com.cg.bankapp.command.repositories.AccountCommandRepository;
import com.cg.bankapp.dtos.TransactionDTO;
import com.cg.bankapp.exceptions.AccountDetailsNotFoundException;
import com.cg.bankapp.exceptions.HighValueTransactionException;
import com.cg.bankapp.exceptions.InsufficientFundsException;
import com.cg.bankapp.exceptions.InvalidCustomerIdException;
import com.cg.bankapp.exceptions.NegativeAmountException;
import com.cg.bankapp.query.GetAccountByIdQuery;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;

@Component
public class AccountCommandServiceImpl implements AccountCommandService{
	
	@Autowired
	private CommandGateway commandGateway;
	
	@Autowired
	private QueryGateway queryGateway;
	
	@Autowired
	private AccountCommandRepository commandRepository;
	
	@Autowired
	private RestTemplate restTemplate;

	@Override
	public Account addAccountDetails(Account account) throws InvalidCustomerIdException{
		if(checkCustomerId(account.getCustomerId())==false)
			throw new InvalidCustomerIdException("Customer does not exist with id "+account.getCustomerId());
		account = commandRepository.save(account);
		AccountCreateCommand accountCommand = AccountCreateCommand.builder()
				.uid(UUID.randomUUID().toString())
				.accountNo(account.getAccountNo())
				.balance(account.getBalance())
				.customerId(account.getCustomerId())
				.build();
		commandGateway.sendAndWait(accountCommand);
		return account;
	}

	@Override
	public Account withdrawAmount(int accountNo, double amount) throws AccountDetailsNotFoundException,HighValueTransactionException,NegativeAmountException,InsufficientFundsException{
		Account account = getAccountDetails(accountNo);
		if(amount>100000000)
			throw new HighValueTransactionException("Your account does not have access to make a transaction of amount greater than "+100000000);
		if(account.getBalance()-amount<0)
			throw new InsufficientFundsException("Insufficient funds available");
		if(amount<0)
			throw new NegativeAmountException("Amount cannot be negative");
		account.setBalance(account.getBalance()-amount);
		account = commandRepository.save(account);
		addTransaction(new TransactionDTO("Debit",LocalDateTime.now(),amount,accountNo));
		generateAndExecuteAccountUpdateCommand(account);
		return account;
	}


	@Override
	public Account depositAmount(int accountNo, double amount) throws AccountDetailsNotFoundException,HighValueTransactionException,NegativeAmountException{
		Account account = getAccountDetails(accountNo);
		if(amount>100000000)
			throw new HighValueTransactionException("Your account does not have access to make a transaction of amount greater than "+100000000);
		if(amount<0)
			throw new NegativeAmountException("Amount cannot be negative");
		account.setBalance(account.getBalance()+amount);
		account = commandRepository.save(account);
		addTransaction(new TransactionDTO("Credit",LocalDateTime.now(),amount,accountNo));
		generateAndExecuteAccountUpdateCommand(account);
		return account;
	}

	@Override
	public List<Account> fundTransfer(int accountNoFrom, int accountNoTo, double amount) throws AccountDetailsNotFoundException,HighValueTransactionException,NegativeAmountException, InsufficientFundsException{
		Account fromAccount = withdrawAmount(accountNoFrom, amount);
		Account toAccount = depositAmount(accountNoTo, amount);
		List<Account> accountList = new ArrayList<>(Arrays.asList(fromAccount,toAccount));
		return accountList;
	}
	
	private void addTransaction(TransactionDTO transactionDTO) {
		try {
			String uriEndPoint="http://BANKAPP-TRANSACTIONSERVICE/transaction/addTransactionDetails";
			String jsonData = new ObjectMapper().registerModule(new JavaTimeModule()).writeValueAsString(transactionDTO);
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			
			HttpEntity<String> httpEntity = new HttpEntity<String>(jsonData,headers);
			restTemplate.postForObject(uriEndPoint, httpEntity, TransactionDTO.class);
		} catch (Exception e) {
			TransactionEntryFailedCommand command = TransactionEntryFailedCommand.builder()
					.uid(UUID.randomUUID().toString())
					.transactionDate(transactionDTO.getTransactionDate())
					.transactionType(transactionDTO.getTransactionType())
					.transactionAmount(transactionDTO.getTransactionAmount())
					.accountNo(transactionDTO.getAccountNo())
					.build();
			commandGateway.sendAndWait(command);
		}
	}
	
	private Account getAccountDetails(int accountNo) throws AccountDetailsNotFoundException{
		Account account = new Account();
		BeanUtils.copyProperties(queryGateway.query(new GetAccountByIdQuery(accountNo), ResponseTypes.instanceOf(com.cg.bankapp.query.entities.Account.class)).join(), account);
		return account;
	}
	
	private void generateAndExecuteAccountUpdateCommand(Account account) {
		AccountUpdateCommand command = AccountUpdateCommand.builder()
				.uid(UUID.randomUUID().toString())
				.accountNo(account.getAccountNo())
				.balance(account.getBalance())
				.customerId(account.getCustomerId())
				.build();
		commandGateway.sendAndWait(command);
	}
	private boolean checkCustomerId(int customerId) {
		String url="http://BANKAPP-CUSTOMERSERVICE/customer/getCustomerDetails?id="+customerId;
		String response = restTemplate.getForEntity(url, String.class).getStatusCode().toString();
		String statusCode=HttpStatus.OK.toString();
		if(response.equals(statusCode))
			return true;
		return false;
	}
	
}