package com.cg.bankapp.command.events;

import org.axonframework.config.ProcessingGroup;
import org.axonframework.eventhandling.EventHandler;
import org.axonframework.messaging.responsetypes.ResponseTypes;
import org.axonframework.queryhandling.QueryGateway;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.cg.bankapp.command.repositories.AccountCommandRepository;
import com.cg.bankapp.query.GetAccountByIdQuery;
import com.cg.bankapp.query.entities.Account;
import com.cg.bankapp.query.repositories.AccountQueryRepository;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
@ProcessingGroup("account")
public class AccountEventHandler {

	@Autowired
	private AccountQueryRepository queryRepository;
	
	@Autowired
	private AccountCommandRepository commandRepository;
	
	@Autowired
	private QueryGateway queryGateway;
	
	@EventHandler
	public Account accountCreateEventHandler(AccountCreateEvent accountCreateEvent) {
		Account account = new Account();
		BeanUtils.copyProperties(accountCreateEvent, account);
		return queryRepository.save(account);
	}
	
	@EventHandler
	public Account accountUpdateEventHandler(AccountUpdateEvent event) {
		Account account = queryGateway.query(new GetAccountByIdQuery(event.getAccountNo()), ResponseTypes.instanceOf(Account.class)).join();
		BeanUtils.copyProperties(event, account);
		return queryRepository.save(account);
	}
	
	@EventHandler
	public void on(AccountUpdateRolledBackEvent event) {
		log.error("====  "+event);
		com.cg.bankapp.command.entities.Account accountCommandEntity = commandRepository.findById(event.getAccountNo()).get();;
		
		if(event.getTransactionType().equals("Debit")) {
			System.out.println("Account Update rolled back");
			log.error("Before Roolbacked==== " +accountCommandEntity);
			accountCommandEntity.setBalance(accountCommandEntity.getBalance()+event.getTransactionAmount());
			log.error("After Roolbacked==== " +accountCommandEntity);
		}
		else {
			log.error("====  Credit");
			accountCommandEntity.setBalance(accountCommandEntity.getBalance()-event.getTransactionAmount());
		}
		commandRepository.save(accountCommandEntity);
			log.error("Final ==== " +accountCommandEntity);
	}
}
