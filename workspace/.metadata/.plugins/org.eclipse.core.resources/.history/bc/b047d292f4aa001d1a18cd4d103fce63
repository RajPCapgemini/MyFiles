package com.bankServer.client;

import com.bankServer.bean.*;
import com.bankServer.exception.*;
import com.bankServer.service.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

public class Bank {
	private BankServerService bankServerService;
	public Bank() {
		bankServerService=new BankServerServiceImpl();
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scanner = new Scanner(System.in);
		Bank bank= new Bank();
		int choice;
		do {
			System.out.println("1 to show balance\n2 to withdraw money\n3 to deposit money\n4 to display last 10 transactions\n5 to transfer fund\n6 to display transactions between a duration\n7 to exit");
			choice=scanner.nextInt();
			switch(choice) {
				case 1:{
					System.out.print("Enter account No: ");
					int accountNo=scanner.nextInt();
					try {
					System.out.println(bank.bankServerService.showBalance(accountNo));
					}catch(InvalidAccountException e) {
						System.out.println(e);
					}
					break;
				}
				case 2:{
					System.out.print("Enter account No: ");
					int accountNo = scanner.nextInt();
					System.out.print("Enter amount: ");
					double amount=scanner.nextDouble();
					try {
					System.out.println(bank.bankServerService.withdraw(accountNo, amount)); 
					}catch(InvalidAccountException e) {
						System.out.println(e);
					}catch(InsufficientFundException e){
						System.out.println(e);
					}
					break;
				}
				case 3:{
					System.out.print("Enter account No: ");
					int accountNo = scanner.nextInt();
					System.out.print("Enter amount: ");
					double amount=scanner.nextDouble();
					try {
					System.out.println(bank.bankServerService.deposit(accountNo, amount));
					}catch(InvalidAccountException e) {
						System.out.println(e);
					}
					break;
				}
				case 4:{
					System.out.print("Enter account No: ");
					int accountNo = scanner.nextInt();
					try {
					System.out.println( bank.bankServerService.display(accountNo));
					}catch(InvalidAccountException e) {
						System.out.println(e);
					}
					break;
				}
				case 5:{
					System.out.print("Enter your account No: ");
					int senderAcc = scanner.nextInt();
					System.out.print("Enter receiver account No: ");
					int receiverAcc = scanner.nextInt();
					System.out.print("Enter amount: ");
					double amount=scanner.nextDouble();
					try {
					bank.bankServerService.fundTransfer(senderAcc,receiverAcc, amount);
					}catch(InvalidAccountException e) {
						System.out.println(e);
					}catch(InsufficientFundException e) {
						System.out.println(e);
					}
					break;
				}
				case 6:{
					System.out.print("Enter account No: ");
					int accountNo = scanner.nextInt();
					System.out.print("Enter start date(dd/MM/yy): ");
					String str=scanner.next();
					Date startDate = null,endDate=null;
					try {
						startDate = new SimpleDateFormat("dd/MM/yy").parse(str);
					} catch (ParseException e1) {
						e1.printStackTrace();
					}
					System.out.print("Enter end date(dd/MM/yy): ");
					str=scanner.next();
					try {
						endDate = new SimpleDateFormat("dd/MM/yy").parse(str);
					} catch (ParseException e1) {
						e1.printStackTrace();
					}
					try {
//						System.out.println(startDate+" "+endDate);
						System.out.println( bank.bankServerService.displayTransactionDuration(accountNo,startDate,endDate));
					} catch (InvalidAccountException e) {
						e.printStackTrace();
					}
					break;
				}
				case 7:{
					choice=0;
					break;
				}
			}
		}while(choice!=0);

	}

}
