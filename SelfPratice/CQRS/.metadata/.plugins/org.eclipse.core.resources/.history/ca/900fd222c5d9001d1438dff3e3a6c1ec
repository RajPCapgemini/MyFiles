package com.cg.bankapp.command.saga;

import java.util.UUID;

import org.axonframework.commandhandling.gateway.CommandGateway;
import org.axonframework.modelling.saga.EndSaga;
import org.axonframework.modelling.saga.SagaEventHandler;
import org.axonframework.modelling.saga.SagaLifecycle;
import org.axonframework.modelling.saga.StartSaga;
import org.axonframework.spring.stereotype.Saga;
import org.springframework.beans.factory.annotation.Autowired;

import com.cg.bankapp.command.AccountUpdateRolledBackCommand;
import com.cg.bankapp.command.events.TransactionEntryFailedEvent;

import lombok.extern.slf4j.Slf4j;

@Saga
@Slf4j
public class AccountServiceSaga {

	@Autowired
	private CommandGateway commandGateway;
	
	private static int counter = 0;
	
	@StartSaga
	@SagaEventHandler(associationProperty = "uid")
	public void handleAccountUpdateEvent(TransactionEntryFailedEvent event) {
		try {
		log.info(" Start Saga TransactionEntryFailedCommand  :=   uid  "+event.getUid()  +"  counter   :-  "+ counter++);
		AccountUpdateRolledBackCommand command = AccountUpdateRolledBackCommand.builder()
				.uid(UUID.randomUUID().toString())
				.transactionDate(event.getTransactionDate())
				.transactionType(event.getTransactionType())
				.transactionAmount(event.getTransactionAmount())
				.accountNo(event.getAccountNo())
				.build();
		commandGateway.sendAndWait(command);
		}catch(Exception e) {
			log.info(e.toString());
		}
	}
	
	@EndSaga
	public void on() {
		SagaLifecycle.end();
	}
}
